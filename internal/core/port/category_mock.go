// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package port

import (
	"context"

	"example.com/go-config-management-service/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigurationRepository creates a new instance of MockConfigurationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationRepository {
	mock := &MockConfigurationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationRepository is an autogenerated mock type for the ConfigurationRepository type
type MockConfigurationRepository struct {
	mock.Mock
}

type MockConfigurationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationRepository) EXPECT() *MockConfigurationRepository_Expecter {
	return &MockConfigurationRepository_Expecter{mock: &_m.Mock}
}

// GetConfiguration provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) GetConfiguration(ctx context.Context, name string) (*domain.Config, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Config, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Config); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type MockConfigurationRepository_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockConfigurationRepository_Expecter) GetConfiguration(ctx interface{}, name interface{}) *MockConfigurationRepository_GetConfiguration_Call {
	return &MockConfigurationRepository_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration", ctx, name)}
}

func (_c *MockConfigurationRepository_GetConfiguration_Call) Run(run func(ctx context.Context, name string)) *MockConfigurationRepository_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_GetConfiguration_Call) Return(config *domain.Config, err error) *MockConfigurationRepository_GetConfiguration_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *MockConfigurationRepository_GetConfiguration_Call) RunAndReturn(run func(ctx context.Context, name string) (*domain.Config, error)) *MockConfigurationRepository_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationVersion provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) GetConfigurationVersion(ctx context.Context, name string, version int) (*domain.Config, error) {
	ret := _mock.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersion")
	}

	var r0 *domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) (*domain.Config, error)); ok {
		return returnFunc(ctx, name, version)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) *domain.Config); ok {
		r0 = returnFunc(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = returnFunc(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_GetConfigurationVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationVersion'
type MockConfigurationRepository_GetConfigurationVersion_Call struct {
	*mock.Call
}

// GetConfigurationVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version int
func (_e *MockConfigurationRepository_Expecter) GetConfigurationVersion(ctx interface{}, name interface{}, version interface{}) *MockConfigurationRepository_GetConfigurationVersion_Call {
	return &MockConfigurationRepository_GetConfigurationVersion_Call{Call: _e.mock.On("GetConfigurationVersion", ctx, name, version)}
}

func (_c *MockConfigurationRepository_GetConfigurationVersion_Call) Run(run func(ctx context.Context, name string, version int)) *MockConfigurationRepository_GetConfigurationVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationVersion_Call) Return(config *domain.Config, err error) *MockConfigurationRepository_GetConfigurationVersion_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationVersion_Call) RunAndReturn(run func(ctx context.Context, name string, version int) (*domain.Config, error)) *MockConfigurationRepository_GetConfigurationVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurationVersions provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) ListConfigurationVersions(ctx context.Context, name string, skip uint64, limit uint64) ([]*domain.Config, error) {
	ret := _mock.Called(ctx, name, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationVersions")
	}

	var r0 []*domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) ([]*domain.Config, error)); ok {
		return returnFunc(ctx, name, skip, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) []*domain.Config); ok {
		r0 = returnFunc(ctx, name, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, name, skip, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_ListConfigurationVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurationVersions'
type MockConfigurationRepository_ListConfigurationVersions_Call struct {
	*mock.Call
}

// ListConfigurationVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - skip uint64
//   - limit uint64
func (_e *MockConfigurationRepository_Expecter) ListConfigurationVersions(ctx interface{}, name interface{}, skip interface{}, limit interface{}) *MockConfigurationRepository_ListConfigurationVersions_Call {
	return &MockConfigurationRepository_ListConfigurationVersions_Call{Call: _e.mock.On("ListConfigurationVersions", ctx, name, skip, limit)}
}

func (_c *MockConfigurationRepository_ListConfigurationVersions_Call) Run(run func(ctx context.Context, name string, skip uint64, limit uint64)) *MockConfigurationRepository_ListConfigurationVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurationVersions_Call) Return(configs []*domain.Config, err error) *MockConfigurationRepository_ListConfigurationVersions_Call {
	_c.Call.Return(configs, err)
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurationVersions_Call) RunAndReturn(run func(ctx context.Context, name string, skip uint64, limit uint64) ([]*domain.Config, error)) *MockConfigurationRepository_ListConfigurationVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurations provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) ListConfigurations(ctx context.Context, skip uint64, limit uint64) ([]*domain.Config, error) {
	ret := _mock.Called(ctx, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 []*domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]*domain.Config, error)); ok {
		return returnFunc(ctx, skip, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64) []*domain.Config); ok {
		r0 = returnFunc(ctx, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, skip, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_ListConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurations'
type MockConfigurationRepository_ListConfigurations_Call struct {
	*mock.Call
}

// ListConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - skip uint64
//   - limit uint64
func (_e *MockConfigurationRepository_Expecter) ListConfigurations(ctx interface{}, skip interface{}, limit interface{}) *MockConfigurationRepository_ListConfigurations_Call {
	return &MockConfigurationRepository_ListConfigurations_Call{Call: _e.mock.On("ListConfigurations", ctx, skip, limit)}
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) Run(run func(ctx context.Context, skip uint64, limit uint64)) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) Return(configs []*domain.Config, err error) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Return(configs, err)
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) RunAndReturn(run func(ctx context.Context, skip uint64, limit uint64) ([]*domain.Config, error)) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// PutConfiguration provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) PutConfiguration(ctx context.Context, config *domain.Config) (*domain.Config, error) {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for PutConfiguration")
	}

	var r0 *domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Config) (*domain.Config, error)); ok {
		return returnFunc(ctx, config)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Config) *domain.Config); ok {
		r0 = returnFunc(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Config) error); ok {
		r1 = returnFunc(ctx, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_PutConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutConfiguration'
type MockConfigurationRepository_PutConfiguration_Call struct {
	*mock.Call
}

// PutConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - config *domain.Config
func (_e *MockConfigurationRepository_Expecter) PutConfiguration(ctx interface{}, config interface{}) *MockConfigurationRepository_PutConfiguration_Call {
	return &MockConfigurationRepository_PutConfiguration_Call{Call: _e.mock.On("PutConfiguration", ctx, config)}
}

func (_c *MockConfigurationRepository_PutConfiguration_Call) Run(run func(ctx context.Context, config *domain.Config)) *MockConfigurationRepository_PutConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Config
		if args[1] != nil {
			arg1 = args[1].(*domain.Config)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_PutConfiguration_Call) Return(config1 *domain.Config, err error) *MockConfigurationRepository_PutConfiguration_Call {
	_c.Call.Return(config1, err)
	return _c
}

func (_c *MockConfigurationRepository_PutConfiguration_Call) RunAndReturn(run func(ctx context.Context, config *domain.Config) (*domain.Config, error)) *MockConfigurationRepository_PutConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackConfigurationVersion provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) RollbackConfigurationVersion(ctx context.Context, name string, version int) (*domain.Config, error) {
	ret := _mock.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for RollbackConfigurationVersion")
	}

	var r0 *domain.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) (*domain.Config, error)); ok {
		return returnFunc(ctx, name, version)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) *domain.Config); ok {
		r0 = returnFunc(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = returnFunc(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_RollbackConfigurationVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackConfigurationVersion'
type MockConfigurationRepository_RollbackConfigurationVersion_Call struct {
	*mock.Call
}

// RollbackConfigurationVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version int
func (_e *MockConfigurationRepository_Expecter) RollbackConfigurationVersion(ctx interface{}, name interface{}, version interface{}) *MockConfigurationRepository_RollbackConfigurationVersion_Call {
	return &MockConfigurationRepository_RollbackConfigurationVersion_Call{Call: _e.mock.On("RollbackConfigurationVersion", ctx, name, version)}
}

func (_c *MockConfigurationRepository_RollbackConfigurationVersion_Call) Run(run func(ctx context.Context, name string, version int)) *MockConfigurationRepository_RollbackConfigurationVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_RollbackConfigurationVersion_Call) Return(config *domain.Config, err error) *MockConfigurationRepository_RollbackConfigurationVersion_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *MockConfigurationRepository_RollbackConfigurationVersion_Call) RunAndReturn(run func(ctx context.Context, name string, version int) (*domain.Config, error)) *MockConfigurationRepository_RollbackConfigurationVersion_Call {
	_c.Call.Return(run)
	return _c
}
